import streamlit as st
import re
from utils.pdf_parser import extract_text_from_pdf
from utils.summarizer import generate_summary
from utils.qa import ask_question
from utils.question_generator import generate_challenge_questions

st.set_page_config(page_title="Smart Research Assistant", layout="wide")
st.title("üìö Smart GenAI Research Assistant (Local)")

uploaded_file = st.file_uploader("Upload PDF or TXT file", type=['pdf', 'txt'])

if uploaded_file:
    if uploaded_file.name.endswith('.pdf'):
        doc_text = extract_text_from_pdf(uploaded_file)
    else:
        doc_text = uploaded_file.read().decode()

    st.subheader("üìù Document Summary")
    summary = generate_summary(doc_text)
    st.success(summary)

    mode = st.radio("Choose Interaction Mode:", ["Ask Anything", "Challenge Me"])

    if mode == "Ask Anything":
        user_q = st.text_input("Ask a question about the document:")
        if user_q:
            st.info("Answer:")
            answer = ask_question(doc_text, user_q)
            st.write(answer)

    elif mode == "Challenge Me":
        st.subheader("üß† Challenge Questions")
        
        # Generate and split questions robustly
        raw_q = generate_challenge_questions(doc_text)
        questions = re.split(r"(?:(?:^|\n)[Qq]?[1-3][).:] ?)", raw_q)
        questions = [q.strip() for q in questions if q.strip()]

        if len(questions) < 3:
            st.warning("‚ö†Ô∏è Warning: Fewer than 3 valid questions were generated by the model.")

        user_answers = []
        for i, q in enumerate(questions[:3]):
            st.markdown(f"**Q{i+1}:** {q}")
            ans = st.text_area(f"Your Answer to Q{i+1} (max 40 words)", max_chars=300, height=80)
            user_answers.append(ans)

        if st.button("Evaluate My Answers"):
            for i, user_ans in enumerate(user_answers):
                if not user_ans.strip():
                    st.warning(f"‚ùó Please answer Question {i+1} before evaluating.")
                    continue

                short_doc = doc_text[:3000]  # Truncate for faster response

                eval_prompt = f"""
You are an evaluator. Do NOT answer the question yourself.

Instructions:
- ‚úÖ Judge if the user's answer is correct
- üí¨ Give a brief reason (max 2‚Äì3 lines)
- ‚ùå Do NOT answer the question yourself
- ‚ùå Do NOT expand the correct answer
- ‚úÖ End with ‚ÄúCorrect‚Äù or ‚ÄúIncorrect‚Äù

Question:
Q{i+1}: {questions[i]}

User's Answer:
{user_ans}

Document (reference only):
{short_doc}
"""

                with st.spinner(f"Evaluating Answer {i+1}..."):
                    feedback = ask_question(doc_text, eval_prompt)
                    short_feedback = "\n".join(feedback.split("\n")[:3])  # Trim to 3 lines
                    st.success(f"üß™ Feedback for Q{i+1}:")
                    st.write(short_feedback)
